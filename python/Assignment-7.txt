1. What is the name of the feature responsible for generating Regex objects?

	Feature: re module
	Function to generate Regex objects: re.compile()


2. Why do raw strings often appear in Regex objects?

	Raw Strings: Used to simplify regex patterns and improve readability by avoiding the need to escape backslashes.


3. What is the return value of the search() method?

	Return Value: match object if a match is found; otherwise, None.
	
4. From a Match item, how do you get the actual strings that match the pattern?

	group(): Returns the matched string or specific groups.
	groups(): Returns a tuple of all matched groups.

5. In the regex which created from the r'(\d\d\d)-(\d\d\d-\d\d\d\d), what does group zero cover?
Group 2? Group 1?

	Group 0: Covers the entire matched string.
	Group 1: Covers the first set of digits before the hyphen (i.e., the area code).
	Group 2: Covers the second set of digits after the hyphen (i.e., the central office code and the line number).

	import re

	pattern = re.compile(r'(\d\d\d)-(\d\d\d-\d\d\d\d)')
	match = pattern.search('123-456-7890')

	if match:
    		print("Group 0:", match.group(0))  # Output: '123-456-7890'
    		print("Group 1:", match.group(1))  # Output: '123'
    		print("Group 2:", match.group(2))  # Output: '456-7890'


6. In standard expression syntax, parentheses and intervals have distinct meanings. How can you tell
a regex that you want it to fit real parentheses and periods?

	Literal Parentheses: Use \( and \) in your regex pattern.
	Literal Period: Use \. in your regex pattern.

7. The findall() method returns a string list or a list of string tuples. What causes it to return one of
the two options?

	No Capturing Groups: findall() returns a list of strings.
	With Capturing Groups: findall() returns a list of tuples, where each tuple contains the matched groups.		

8. In standard expressions, what does the | character mean?

	| Character: Represents a logical OR, matching either of the alternatives specified in the regex pattern.

9. In regular expressions, what does the character stand for?

	Escape Character (\): Used to escape special characters or introduce special sequences in regular expressions.
	
10.In regular expressions, what is the difference between the + and * characters?

	+: Matches one or more occurrences of the preceding element. The match must contain at least one occurrence.
	*: Matches zero or more occurrences of the preceding element. The match can contain zero occurrences.

11. What is the difference between {4} and {4,5} in regular expression?
	
	{4}: Matches exactly 4 occurrences of the preceding element.
	{4,5}: Matches between 4 and 5 occurrences of the preceding element, inclusive

12. What do you mean by the \d, \w, and \s shorthand character classes signify in regular
expressions?

	\d: Matches any digit ([0-9]).
	\w: Matches any word character ([a-zA-Z0-9_]).
	\s: Matches any whitespace character ([ \t\n\r\f\v]).

13. What do means by \D, \W, and \S shorthand character classes signify in regular expressions?
	
	\D: Matches any character that is not a digit ([^0-9]).
	\W: Matches any character that is not a word character ([^a-zA-Z0-9_]).
	\S: Matches any character that is not a whitespace character ([^ \t\n\r\f\v]).

14. What is the difference between .*? and .*?
	
	.*: Greedy match; it matches as many characters as possible.
	.*?: Non-greedy (lazy) match; it matches as few characters as necessary.
	
15. What is the syntax for matching both numbers and lowercase letters with a character class?

	result = re.compile([r'[a-z0-9]')	


16. What is the procedure for making a normal expression in regax case insensitive?

	re.IGNORECASE Flag: Makes the regular expression case insensitive.
	Inline Flag ((?i)): An alternative way to specify case insensitivity within the pattern.


17. What does the . character normally match? What does it match if re.DOTALL is passed as 2nd
argument in re.compile()?

	Default Behavior: . matches any character except newlines.
	With re.DOTALL: . matches any character, including newlines.


18. If numReg = re.compile(r'\d+'), what will numRegex.sub('X','11 drummers, 10 pipers, five rings, 4hen') return?

	import re

	# Compile the regular expression pattern
	numReg = re.compile(r'\d+')

	# Replace all sequences of digits with 'X'
	result = numReg.sub('X', '11 drummers, 10 pipers, five rings, 4hen')

	print(result)  # Output: 'X drummers, X pipers, five rings, Xhen'



19. What does passing re.VERBOSE as the 2nd argument to re.compile() allow to do?

	re.VERBOSE allows you to use whitespace and comments in regular expressions, improving readability and maintainability of complex pattern

20. How would you write a regex that match a number with comma for every three digits? It must match the given following:
'42'
'1,234'
'6,368,745'


but not the following:
'12,34,567' (which has only two digits between the commas)
'1234' (which lacks commas)

Ans:- 


code:
-----

import re

# Define the regex pattern
pattern = re.compile(r'^\d{1,3}(,\d{3})*$')

# Test strings
test_strings = [
    '42',
    '1,234',
    '6,368,745',
    '12,34,567',  # Should not match
    '1234'        # Should not match
]

# Check which strings match the pattern
for test_string in test_strings:
    match = pattern.fullmatch(test_string)
    print(f'{test_string}: {"Match" if match else "No match"}')



21. How would you write a regex that matches the full name of someone whose last name isWatanabe? You can assume that the first name that comes before it will always be one word that begins with a capital letter. The regex must match the following:
'Haruto Watanabe'
'Alice Watanabe'
'RoboCop Watanabe'
but not the following:
'haruto Watanabe (where the first name is not capitalized)
'Mr. Watanabe' (where the preceding word has a nonletter character)
'Watanabe' (which has no first name)
'Haruto watanabe' (where Watanabe is not capitalized)

code:
-----

import re

# Define the regex pattern
pattern = re.compile(r'^[A-Z][a-zA-Z]* Watanabe$')

# Test strings
test_strings = [
    'Haruto Watanabe',
    'Alice Watanabe',
    'RoboCop Watanabe',
    'haruto Watanabe',    # Should not match
    'Mr. Watanabe',       # Should not match
    'Watanabe',           # Should not match
    'Haruto watanabe'    # Should not match
]

# Check which strings match the pattern
for test_string in test_strings:
    match = pattern.fullmatch(test_string)
    print(f'{test_string}: {"Match" if match else "No match"}')



22. How would you write a regex that matches a sentence where the first word is either Alice, Bob, or Carol; the second word is either eats, pets, or throws; the third word is apples, cats, or baseballs and the sentence ends with a period? This regex should be case-insensitive. It must match the
following:
'Alice eats apples.'
'Bob pets cats.'
'Carol throws baseballs.'
'Alice throws Apples.'
'BOB EATS CATS.'
but not the following:
'RoboCop eats apples.'
'ALICE THROWS FOOTBALLS.'
'Carol eats 7 cats.'


code:
-----
import re

# Define the regex pattern with case-insensitivity
pattern = re.compile(r'^(Alice|Bob|Carol) (eats|pets|throws) (apples|cats|baseballs)\.$', re.IGNORECASE)

# Test strings
test_strings = [
    'Alice eats apples.',
    'Bob pets cats.',
    'Carol throws baseballs.',
    'Alice throws Apples.',
    'BOB EATS CATS.',
    'RoboCop eats apples.',    # Should not match
    'ALICE THROWS FOOTBALLS.', # Should not match
    'Carol eats 7 cats.'      # Should not match
]

# Check which strings match the pattern
for test_string in test_strings:
    match = pattern.fullmatch(test_string)
    print(f'{test_string}: {"Match" if match else "No match"}')
