1. Make a class called Thing with no contents and print it. Then, create an object called example
from this class and also print it. Are the printed values the same or different?

class Thing:
    pass

print(Thing)
example = Thing()
print(example)

<class '__main__.Thing'>
<__main__.Thing object at 0x000002D9651DEDD0>


2. Create a new class called Thing2 and add the value 'abc' to the letters class attribute. Letters
should be printed.


class Thing2:
    letters = 'abc'

# Print the class attribute letters
print(Thing2.letters) #abc

3. Make yet another class called, of course, Thing3. This time, assign the value 'xyz' to an instance
(object) attribute called letters. Print letters. Do you need to make an object from the class to do
this?

class Thing3:
	def __init__(self):
		self.letters= 'xyz'
t=Thing3()
print(t.letters()) #'xyz'

4. Create an Element class with the instance attributes name, symbol, and number. Create a class
object with the values 'Hydrogen','H',and 1.

class Element:
    def __init__(self):
        self.name = 'Hydrogen'
        self.symbol= 'H'
        self.number = 1

e= Element()
print(e.name)
print(e.symbol)
print(e.number)


5. Make a dictionary with these keys and values: 'name': 'Hydrogen', 'symbol':'H', 'number': 1. Then,
create an object called hydrogen from class Element using this dictionary.

class Element:
    def __init__(self,name,symbol,number):
        self.name = name
        self.symbol= symbol
        self.number = number

element_dict = {'name': 'Hydrogen', 'symbol': 'H', 'number': 1}

e= Element(**element_dict)
print(e.name)
print(e.symbol)
print(e.number)


6. For the Element class, define a method called dump() that prints the values of the objectâ€™s
attributes (name, symbol, and number). Create the hydrogen object from this new definition and
use dump() to print its attributes.


class Element:
    def __init__(self,name,symbol,number):
        self.name = name
        self.symbol= symbol
        self.number = number
    def dump(self):
        print('Name:',self.name)
        print('Symbol:',self.symbol)
        print('Number:',self.number)
element_dict = {'name': 'Hydrogen', 'symbol': 'H', 'number': 1}

e= Element(**element_dict)
e.dump()


7. Call print(hydrogen). In the definition of Element, change the name of method dump to __str__,
create a new hydrogen object, and call print(hydrogen) again.

class Element:
    def __init__(self,name,symbol,number):
        self.name = name
        self.symbol= symbol
        self.number = number
        # Define the __str__ method

    def __str__(self):
        return f'Name: {self.name}, Symbol: {self.symbol}, Number: {self.number}'

element_dict = {'name': 'Hydrogen', 'symbol': 'H', 'number': 1}

hydrogen = Element(**element_dict)
print(hydrogen)


8. Modify Element to make the attributes name, symbol, and number private. Define a getter
property for each to return its value.

# Define the Element class with private attributes and getter properties
class Element:
    def __init__(self, name, symbol, number):
        self.__name = name
        self.__symbol = symbol
        self.__number = number

    # Define getter properties
    @property
    def name(self):
        return self.__name

    @property
    def symbol(self):
        return self.__symbol

    @property
    def number(self):
        return self.__number

    # Define the __str__ method
    def __str__(self):
        return f'Name: {self.name}, Symbol: {self.symbol}, Number: {self.number}'


# Create a dictionary with the keys and values
element_dict = {'name': 'Hydrogen', 'symbol': 'H', 'number': 1}

# Create an instance of Element using the dictionary
hydrogen = Element(**element_dict)

# Call print(hydrogen) to use the __str__ method
print(hydrogen)

# Access the attributes using the getter properties
print(hydrogen.name)
print(hydrogen.symbol)
print(hydrogen.number)


9. Define three classes: Bear, Rabbit, and Octothorpe. For each, define only one method: eats(). This
should return 'berries' (Bear), 'clover' (Rabbit), or 'campers' (Octothorpe). Create one object from
each and print what it eats.


# Define the Bear class with the eats method
class Bear:
    def eats(self):
        return 'berries'

# Define the Rabbit class with the eats method
class Rabbit:
    def eats(self):
        return 'clover'

# Define the Octothorpe class with the eats method
class Octothorpe:
    def eats(self):
        return 'campers'

# Create instances of each class
bear = Bear()
rabbit = Rabbit()
octothorpe = Octothorpe()

# Print what each instance eats
print(f'Bear eats: {bear.eats()}')
print(f'Rabbit eats: {rabbit.eats()}')
print(f'Octothorpe eats: {octothorpe.eats()}')




10. Define these classes: Laser, Claw, and SmartPhone. Each has only one method: does(). This
returns 'disintegrate' (Laser), 'crush' (Claw), or 'ring' (SmartPhone). Then, define the class Robot that
has one instance (object) of each of these. Define a does() method for the Robot that prints what its
component objects do.


# Define the Laser class with the does method
class Laser:
    def does(self):
        return 'disintegrate'

# Define the Claw class with the does method
class Claw:
    def does(self):
        return 'crush'

# Define the SmartPhone class with the does method
class SmartPhone:
    def does(self):
        return 'ring'

# Define the Robot class with instances of Laser, Claw, and SmartPhone
class Robot:
    def __init__(self):
        self.laser = Laser()
        self.claw = Claw()
        self.smartphone = SmartPhone()
    
    def does(self):
        print(f'Laser does: {self.laser.does()}')
        print(f'Claw does: {self.claw.does()}')
        print(f'SmartPhone does: {self.smartphone.does()}')

# Create an instance of Robot
robot = Robot()

# Call the does method of the Robot
robot.does()



