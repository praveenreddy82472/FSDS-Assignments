Question 1:
Define a class with a generator which can iterate the numbers, which are divisible by
7, between a given range 0 and n.

class DivisibleBySeven:
    def __init__(self, n):
        self.n = n  # Initialize the upper limit

    def generate(self):
        """Generator method to yield numbers divisible by 7."""
        for number in range(0, self.n + 1):
            if number % 7 == 0:  # Check if the number is divisible by 7
                yield number


# Example usage
if __name__ == "__main__":
    n = int(input("Enter the upper limit (n): "))
    divisible_by_seven = DivisibleBySeven(n)

    print(f"Numbers divisible by 7 between 0 and {n}:")
    for num in divisible_by_seven.generate():
        print(num)



Question 2:
Write a program to compute the frequency of the words from the input. The output
should output after sorting the key alphanumerically.
Suppose the following input is supplied to the program:
New to Python or choosing between Python 2 and Python 3? Read Python 2 or
Python 3.
Then, the output should be:
2:2
3.:1
3?:1
New:1
Python:5
Read:1
and:1
between:1
choosing:1
or:2
to:1


from collections import Counter

def compute_word_frequency():
    # Input: Accept a sentence
    input_text = input("Enter a sentence: ")
    
    # Split the input text into words
    words = input_text.split()
    
    # Count the frequency of each word using Counter
    word_count = Counter(words)
    
    # Sort the word count dictionary by key
    sorted_word_count = dict(sorted(word_count.items()))
    
    # Print the word frequencies
    for word, count in sorted_word_count.items():
        print(f"{word}:{count}")

# Call the function
compute_word_frequency()


Question 3:
Define a class Person and its two child classes: Male and Female. All classes have a
method 'getGender' which can print 'Male' for Male class and 'Female' for Female
class.

class Person:
    def getGender(self):
        """Method to be overridden by child classes."""
        raise NotImplementedError("Subclasses must implement this method.")

class Male(Person):
    def getGender(self):
        """Override getGender method for Male."""
        print("Male")

class Female(Person):
    def getGender(self):
        """Override getGender method for Female."""
        print("Female")

# Example usage
if __name__ == "__main__":
    # Creating objects of Male and Female classes
    male = Male()
    female = Female()
    
    # Calling getGender method
    male.getGender()   # Output: Male
    female.getGender() # Output: Female



Question 4:
Please write a program to generate all sentences where subject is in ['I', 'You'] and
verb is in ['Play','Love'] and the object is in ['Hockey','Football'].

def generate_sentences():
    subjects = ['I', 'You']
    verbs = ['Play', 'Love']
    objects = ['Hockey', 'Football']
    
    sentences = []  # List to store the generated sentences
    
    # Generate sentences using nested loops
    for subject in subjects:
        for verb in verbs:
            for obj in objects:
                sentence = f"{subject} {verb} {obj}."
                sentences.append(sentence)
    
    return sentences

# Example usage
if __name__ == "__main__":
    generated_sentences = generate_sentences()
    
    # Print the generated sentences
    for sentence in generated_sentences:
        print(sentence)


Question 5:
Please write a program to compress and decompress the string 'hello world!hello
world!hello world!hello world!'.

import zlib

def compress_string(input_string):
    """Compress the input string."""
    compressed_data = zlib.compress(input_string.encode())
    return compressed_data

def decompress_string(compressed_data):
    """Decompress the compressed data."""
    decompressed_data = zlib.decompress(compressed_data)
    return decompressed_data.decode()

# Given string
input_string = 'hello world!hello world!hello world!hello world!'

# Compress the string
compressed_data = compress_string(input_string)
print(f"Compressed data: {compressed_data}")

# Decompress the string
decompressed_string = decompress_string(compressed_data)
print(f"Decompressed string: {decompressed_string}")


Question 6:
Please write a binary search function which searches an item in a sorted list. The
function should return the index of element to be searched in the list.


def binary_search(sorted_list, target):
    """Perform binary search on a sorted list to find the target value.

    Args:
        sorted_list (list): A list of sorted elements.
        target: The element to search for.

    Returns:
        int: The index of the target if found, else -1.
    """
    left, right = 0, len(sorted_list) - 1
    
    while left <= right:
        mid = (left + right) // 2  # Calculate the middle index
        
        # Check if the target is at mid
        if sorted_list[mid] == target:
            return mid
        # If target is greater, ignore the left half
        elif sorted_list[mid] < target:
            left = mid + 1
        # If target is smaller, ignore the right half
        else:
            right = mid - 1
    
    # Target not found
    return -1

# Example usage
if __name__ == "__main__":
    sorted_list = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
    target = 7
    
    result = binary_search(sorted_list, target)
    
    if result != -1:
        print(f"Element {target} is present at index {result}.")
    else:
        print(f"Element {target} is not present in the list.")

