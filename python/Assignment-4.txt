1. What exactly is []?
	it is a list symbol,to store a set of elememnts in the list 

2. In a list of values stored in a variable called spam, how would you assign the value hello as the
third value? (Assume [2, 4, 6, 8, 10] are in spam.)

spam = [2,4,6,8,10]
spam[2] = 'hello'
print(spam) #[2,4,'hello','6','8','10']

Lets pretend the spam includes the list ['a', 'b', 'c', 'd'] for the next three queries.

spam = ['a', 'b', 'c', 'd']  # Initial list
spam[2] = 'hello' #['a', 'b','hello', 'c', 'd']


3. What is the value of spam[int(int('3' * 2) / 11)]?
	spam = ['a', 'b', 'c', 'd']
	res = spam[(int(int(('3'*2))/11))]
	print(res)#['d']

4. What is the value of spam[-1]?
	spam =['a', 'b', 'c', 'd']
	print(spam[-1]) #['d']

5. What is the value of spam[:2]?
	spam = ['a', 'b', 'c', 'd']
	print(spam[0:2]) #['a','b']

Let's pretend bacon has the list [3.14,'cat',11,'cat',True] for the next three questions.

6. What is the value of bacon.index('cat')?
	ans:- 1


7. How does bacon.append(99) change the look of the list value in bacon?
	bacon=  [3.14,'cat',11,'cat',True]
	bacon.append(99)
	print(bacon) #[3.14,'cat',11,'cat',True,99]

8. How does bacon.remove('cat') change the look of the list in bacon?
	bacon= [3.14, 'cat', 11, 'cat', True]
	print(bacon.remove('cat'))
	print(bacon) #[3.14, 11, 'cat', True]

9. What are the list concatenation and list replication operators?
	List Concatenation (+): This operator combines two or more lists into a single list. It creates a new list with elements from all the lists 	involved.
	List Replication (*): This operator repeats the elements of a list a specified number of times. It creates a new list with the elements duplicated.
	
10. What is difference between the list methods append() and insert()?

	append() Adds a single element to the end of the list.
	insert() Inserts a single element at a specified position in the list.

11. What are the two methods for removing items from a list?
	remove()  Removes the first occurrence of a specific value from the list.
	pop()	Removes and returns the item at a specified index. If no index is provided, it removes and returns the last item.

12. Describe how list values and string values are identical.
	List values and string values in Python are identical in several ways:

	Indexing: Both lists and strings support indexing to access individual elements. For example, my_list[0] and my_string[0] both access the first 	element or character.
	Slicing: Both support slicing to extract a subset of elements or characters. For example, my_list[1:3] and my_string[1:3] return the elements or 	characters from index 1 to 2.
	Iteration: Both lists and strings can be iterated over using loops. For example, for item in my_list and for char in my_string.
	Length: You can use the len() function to get the number of elements in a list or characters in a string.
	However, lists are mutable (you can modify elements), while strings are immutable (you cannot change individual characters directly)
	
13. What the difference between tuples and lists?
	tuple is to store elements in (),it is immutable
	list is to store elements in [], it is mutable 

14. How do you type a tuple value that only contains the integer 42?
	tuple  = (42,)

15. How do you get a list value's tuple form? How do you get a tuple value's list form?

	converting list to tuple: tuple()
	converting tuple to list: list()

16. Variables that contain list values are not necessarily lists themselves. Instead, what do they
contain?
	In Python, variables hold references to objects in memory, not the objects directly. So when you assign a list to a variable, the variable holds a 	reference to the list object, not a copy of the list.

17. How do you distinguish between copy.copy() and copy.deepcopy()?

copy.copy()  --> Creates a new object, but does not recursively copy nested objects. Instead, it copies references to the nested objects.
import copy

original = [[1, 2], [3, 4]]
shallow_copy = copy.copy(original)
shallow_copy[0][0] = 99

print(original)       # Output: [[99, 2], [3, 4]]
print(shallow_copy)  # Output: [[99, 2], [3, 4]]

copy.deepcopy() --> Creates a new object and recursively copies all nested objects, ensuring that the new object is completely independent of the original.

import copy

original = [[1, 2], [3, 4]]
deep_copy = copy.deepcopy(original)
deep_copy[0][0] = 99

print(original)       # Output: [[1, 2], [3, 4]]
print(deep_copy)     # Output: [[99, 2], [3, 4]]
