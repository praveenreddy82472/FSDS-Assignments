1. Write a Python Program to Display Fibonacci Sequence Using Recursion?


def fib(n):
    # Base case: if n is 0, return an empty list
    if n <= 0:
        return []
    # Base case: if n is 1, return the first Fibonacci number
    elif n == 1:
        return [0]
    # Base case: if n is 2, return the first two Fibonacci numbers
    elif n == 2:
        return [0, 1]
    else:
        # Recursive case: get the Fibonacci sequence up to n-1 terms
        sequence = fib(n - 1)
        # Append the next Fibonacci number
        sequence.append(sequence[-1] + sequence[-2])
        return sequence

# Input: Get the number of terms from the user
num_terms = int(input("Enter the number of terms for Fibonacci sequence: "))
# Get the Fibonacci sequence
fibonacci_sequence = fib(num_terms)
# Output: Display the Fibonacci sequence
print(f"Fibonacci sequence up to {num_terms} terms: {fibonacci_sequence}")


2. Write a Python Program to Find Factorial of Number Using Recursion?

def fac(n):
    res= 1
    for i in range(1,n+1):
        res = res * i
    print(res)
fac(5)


3. Write a Python Program to calculate your Body Mass Index?


def calculate_bmi(weight_kg, height_feet, height_inches):
    # Convert height to meters
    height_meters = (height_feet * 0.3048) + (height_inches * 0.0254)
    # Calculate BMI
    bmi = weight_kg / (height_meters ** 2)
    return bmi

# Example usage
weight = 73  # weight in kilograms
height_ft = 5  # height in feet
height_in = 8  # height in inches

bmi_value = calculate_bmi(weight, height_ft, height_in)
print(f"BMI: {bmi_value:.2f}")


4. Write a Python Program to calculate the natural logarithm of any number?


import math

def calculate_natural_logarithm(number):
    if number <= 0:
        return "Natural logarithm is not defined for non-positive numbers."
    else:
        return math.log(number)

# Get user input
try:
    user_input = float(input("Enter a number to calculate its natural logarithm: "))
    result = calculate_natural_logarithm(user_input)
    print(f"The natural logarithm of {user_input} is: {result}")
except ValueError:
    print("Invalid input! Please enter a valid number.")


5. Write a Python Program for cube sum of first n natural numbers?

def cube_sum(n):
    # Calculate the sum of the first n natural numbers
    sum_natural_numbers = (n * (n + 1)) // 2
    # Calculate the cube sum
    return sum_natural_numbers ** 2

# Get user input
try:
    n = int(input("Enter a natural number n to calculate the cube sum of the first n natural numbers: "))
    if n < 1:
        print("Please enter a positive integer greater than 0.")
    else:
        result = cube_sum(n)
        print(f"The cube sum of the first {n} natural numbers is: {result}")
except ValueError:
    print("Invalid input! Please enter a valid natural number.")
