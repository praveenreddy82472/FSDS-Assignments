Question 1:
Write a program that calculates and prints the value according to the given formula:
Q = Square root of [(2 * C * D)/H]
Following are the fixed values of C and H:
C is 50. H is 30.
D is the variable whose values should be input to your program in a comma-separated
sequence.
Example
Let us assume the following comma separated input sequence is given to the program:
100,150,180
The output of the program should be:
18,22,24

Ans:
----

import math

# Fixed values
C = 50
H = 30

# Input: Comma-separated sequence of D values
D = [100, 150, 180]

# List to store the calculated Q values
Q = []

# Calculate Q for each value in D
for i in D:
    # Apply the formula
    res = (2 * C * i) / H
    Q.append(int(math.sqrt(res)))  # Taking the square root and converting to integer

# Print the results as a comma-separated string
print(','.join(map(str, Q)))



Question 2:
Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array. The
element value in the i-th row and j-th column of the array should be i*j.
Note: i=0,1.., X-1; j=0,1,Â¡Y-1.
Example
Suppose the following inputs are given to the program:
3,5
Then, the output of the program should be:
[[0, 0, 0, 0, 0], [0, 1, 2, 3, 4], [0, 2, 4, 6, 8]]

ANS:
----

# Function to generate a 2D array
def generate_2d_array(X, Y):
    # Create a 2D array using list comprehension
    array = [[i * j for j in range(Y)] for i in range(X)]
    return array

# Input: Read X and Y from the user
input_values = input("Enter two digits separated by a comma (X,Y): ")
X, Y = map(int, input_values.split(','))

# Generate the 2D array
result_array = generate_2d_array(X, Y)

# Print the result
print(result_array)



Question 3:
Write a program that accepts a comma separated sequence of words as input and prints the
words in a comma-separated sequence after sorting them alphabetically.
Suppose the following input is supplied to the program:
without,hello,bag,world
Then, the output should be:
bag,hello,without,world

# Function to sort words alphabetically
def sort_words():
    # Input: Accept a comma-separated sequence of words
    input_sequence = input("Enter a comma-separated sequence of words: ")

    # Split the input into a list of words
    words = input_sequence.split(',')

    # Sort the list of words alphabetically
    sorted_words = sorted(words)

    # Join the sorted list back into a comma-separated string
    output_sequence = ','.join(sorted_words)

    # Print the result
    print(output_sequence)


# Call the function
sort_words()




Question 4:
Write a program that accepts a sequence of whitespace separated words as input and prints
the words after removing all duplicate words and sorting them alphanumerically.
Suppose the following input is supplied to the program:
hello world and practice makes perfect and hello world again
Then, the output should be:
again and hello makes perfect practice world

# Function to process the input and remove duplicates
def process_words():
    # Input: Accept a sequence of whitespace-separated words
    input_sequence = input("Enter a sequence of words: ")

    # Split the input into a list of words
    words = input_sequence.split()

    # Remove duplicates by converting the list to a set
    unique_words = set(words)

    # Sort the unique words alphanumerically
    sorted_words = sorted(unique_words)

    # Join the sorted list back into a whitespace-separated string
    output_sequence = ' '.join(sorted_words)

    # Print the result
    print(output_sequence)


# Call the function
process_words()


Question 5:
Write a program that accepts a sentence and calculate the number of letters and digits.
Suppose the following input is supplied to the program:
hello world! 123
Then, the output should be:
LETTERS 10
DIGITS 3


# Function to count letters and digits in a sentence
def count_letters_and_digits():
    # Input: Accept a sentence
    sentence = input("Enter a sentence: ")
    
    # Initialize counters
    letters_count = 0
    digits_count = 0
    
    # Iterate through each character in the sentence
    for char in sentence:
        if char.isalpha():  # Check if the character is a letter
            letters_count += 1
        elif char.isdigit():  # Check if the character is a digit
            digits_count += 1
    
    # Print the results
    print(f"LETTERS {letters_count}")
    print(f"DIGITS {digits_count}")

# Call the function
count_letters_and_digits()


Question 6:
A website requires the users to input username and password to register. Write a program to
check the validity of password input by users.
Following are the criteria for checking the password:
1. At least 1 letter between [a-z]
2. At least 1 number between [0-9]
1. At least 1 letter between [A-Z]
3. At least 1 character from [$#@]
4. Minimum length of transaction password: 6
5. Maximum length of transaction password: 12
Your program should accept a sequence of comma separated passwords and will check them
according to the above criteria. Passwords that match the criteria are to be printed, each
separated by a comma.
Example
If the following passwords are given as input to the program:
ABd1234@1,a F1#,2w3E*,2We3345
Then, the output of the program should be:
ABd1234@1


import re


# Function to check the validity of passwords
def check_passwords():
    # Input: Accept a sequence of comma-separated passwords
    passwords = input("Enter comma-separated passwords: ").split(',')

    # List to hold valid passwords
    valid_passwords = []

    # Define the password validation criteria
    for password in passwords:
        # Check criteria using regular expressions
        if (6 <= len(password) <= 12 and
                re.search(r'[a-z]', password) and  # At least 1 lowercase letter
                re.search(r'[A-Z]', password) and  # At least 1 uppercase letter
                re.search(r'[0-9]', password) and  # At least 1 digit
                re.search(r'[$#@]', password)):  # At least 1 special character
            valid_passwords.append(password)

    # Print valid passwords, joined by a comma
    print(','.join(valid_passwords))


# Call the function
check_passwords()

